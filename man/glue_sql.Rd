% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sql.R
\name{glue_sql}
\alias{glue_sql}
\alias{glue_data_sql}
\title{Interpolate strings with SQL escaping}
\usage{
glue_sql(..., .con, .envir = parent.frame())

glue_data_sql(.x, ..., .con, .envir = parent.frame())
}
\arguments{
\item{...}{[\code{expressions}]\cr Expressions string(s) to format, multiple inputs are concatenated together before formatting.}

\item{.con}{[\code{DBIConnection}]:A DBI connection object obtained from \code{DBI::dbConnect()}.}

\item{.envir}{[\code{environment}: \code{parent.frame()}]\cr Environment to evaluate each expression in. Expressions are
evaluated from left to right. If \code{.x} is an environment, the expressions are
evaluated in that environment and \code{.envir} is ignored.}

\item{.x}{[\code{listish}]\cr An environment, list or data frame used to lookup values.}
}
\description{
SQL databases often have custom quotation syntax for identifiers and strings
which make writing SQL queries error prone and cumbersome to do. \code{glue_sql()} and
\code{glue_sql_data()} are analogs to \code{glue()} and \code{glue_data()} which handle the
SQL quoting.
}
\details{
They automatically quote character results, quote identifiers if the glue
expression is surrounded by backticks \sQuote{`} and do not quote
non-characters such as numbers.

Returning the result with \code{DBI::SQL()} will suppress quoting if desired.
This can be useful for embedding SQL into larger queries.
}
\examples{
con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
var <- "bar"
tbl <- "basket"
num <- 2
val <- "blue"
glue_sql("
  SELECT {`var`}
  FROM {`tbl`}
  WHERE {`tbl`}.size > {num}
    AND {`tbl`}.color = {val}
  ", .con = con)

# If you do not want to quote a given value, use `DBI::SQL()` around it, this
# is one way to build up more complex queries with interchangeable sub queries
sub_query <- glue_sql("
  SELECT *
  FROM {`tbl`}
  ", .con = con)

glue_sql("
  SELECT s.{`var`}
  FROM ({DBI::SQL(sub_query)}) AS s
  ", .con = con)

DBI::dbDisconnect(con)
}
